# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except ImportError:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class MetagenomeAPI(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://ci.kbase.us/services/auth/api/legacy/KBase/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def search_binned_contigs(self, params, context=None):
        """
        :param params: instance of type "SearchBinnedContigsOptions"
           (num_found - optional field which when set informs that there is
           no need to perform full scan in order to count this value because
           it was already done before; please don't set this value with 0 or
           any guessed number if you didn't get right value previously.) ->
           structure: parameter "ref" of String, parameter "query" of String,
           parameter "sort_by" of list of type "column_sorting" -> tuple of
           size 2: parameter "column" of String, parameter "ascending" of
           type "boolean" (Indicates true or false values, false = 0, true =
           1 @range [0,1]), parameter "start" of Long, parameter "limit" of
           Long, parameter "num_found" of Long
        :returns: instance of type "SearchBinnedContigsResult" (num_found -
           number of all items found in query search (with only part of it
           returned in "bins" list).) -> structure: parameter "query" of
           String, parameter "start" of Long, parameter "bins" of list of
           type "ContigBinData" (bin_id          - id of the bin n_contigs   
           - number of contigs in this bin gc              - GC content over
           all the contigs sum_contig_len  - (bp) total length of the contigs
           cov             - coverage over the bin (if available, may be
           null)) -> structure: parameter "bin_id" of String, parameter
           "n_contigs" of Long, parameter "gc" of Double, parameter
           "sum_contig_len" of Long, parameter "cov" of Double, parameter
           "num_found" of Long
        """
        return self._client.call_method('MetagenomeAPI.search_binned_contigs',
                                        [params], self._service_ver, context)

    def search_contigs_in_bin(self, params, context=None):
        """
        :param params: instance of type "SearchContigsInBin" (num_found -
           optional field which when set informs that there is no need to
           perform full scan in order to count this value because it was
           already done before; please don't set this value with 0 or any
           guessed number if you didn't get right value previously.) ->
           structure: parameter "ref" of String, parameter "bin_id" of
           String, parameter "query" of String, parameter "sort_by" of list
           of type "column_sorting" -> tuple of size 2: parameter "column" of
           String, parameter "ascending" of type "boolean" (Indicates true or
           false values, false = 0, true = 1 @range [0,1]), parameter "start"
           of Long, parameter "limit" of Long, parameter "num_found" of Long
        :returns: instance of type "SearchContigsInBinResult" (num_found -
           number of all items found in query search (with only part of it
           returned in "bins" list).) -> structure: parameter "query" of
           String, parameter "bin_id" of String, parameter "start" of Long,
           parameter "contigs" of list of type "ContigInBin" (contig_id      
           - id of the contig len             - (bp) length of the contig gc 
           - GC content over the contig cov             - coverage over the
           contig (if available, may be null)) -> structure: parameter
           "contig_id" of String, parameter "len" of Long, parameter "gc" of
           Double, parameter "cov" of Double, parameter "num_found" of Long
        """
        return self._client.call_method('MetagenomeAPI.search_contigs_in_bin',
                                        [params], self._service_ver, context)

    def get_annotated_metagenome_assembly(self, params, context=None):
        """
        :param params: instance of type
           "getAnnotatedMetagenomeAssemblyParams" (ref - workspace reference
           to AnnotatedMetagenomeAssembly Object included_fields - The fields
           to include from the Object included_feature_fields -) ->
           structure: parameter "ref" of String, parameter "included_fields"
           of list of String
        :returns: instance of type "getAnnotatedMetagenomeAssemblyOutput" ->
           structure: parameter "genomes" of list of unspecified object
        """
        return self._client.call_method('MetagenomeAPI.get_annotated_metagenome_assembly',
                                        [params], self._service_ver, context)

    def search(self, params, context=None):
        """
        :param params: instance of type "SearchOptions" (query: user provided
           input string to prefix search against 'functions',
           'functional_descriptions', 'id', and 'type' fields of the
           metagenome features. ref:
           `KBaseMetagenomes.AnnotatedMetagenomeAssembly` workspace object
           reference sort_by: list of tuples by which to sort by, ex:
           [("elasticsearch ", ascend bool), ...] start: integer start of
           pagination limit: integer end of pagination) -> structure:
           parameter "query" of String, parameter "ref" of String, parameter
           "sort_by" of list of type "column_sorting" -> tuple of size 2:
           parameter "column" of String, parameter "ascending" of type
           "boolean" (Indicates true or false values, false = 0, true = 1
           @range [0,1]), parameter "start" of Long, parameter "limit" of Long
        :returns: instance of type "SearchResult" (num_found - number of all
           items found in query search (with only part of it returned in
           "features" list). query: the query used on the Search2API start:
           integer index start of pagination features: list of feature
           information.) -> structure: parameter "query" of String, parameter
           "start" of Long, parameter "features" of list of type
           "FeatureData" (aliases - mapping from alias name (key) to set of
           alias sources (value) global_location - this is location-related
           properties that are under sorting whereas items in "location"
           array are not, feature_array - field recording which array a
           feature is located in (features, mrnas, cdss, non_coding_features)
           feature_idx - field keeping the position of feature in its array
           in a Genome object, ontology_terms - mapping from term ID (key) to
           term name (value).) -> structure: parameter "feature_id" of
           String, parameter "dna_sequence" of String, parameter "warnings"
           of list of String, parameter "parent_gene" of String, parameter
           "size" of Long, parameter "functional_descriptions" of list of
           String, parameter "aliases" of mapping from String to list of
           String, parameter "function" of String, parameter "location" of
           list of type "Location" -> structure: parameter "contig_id" of
           String, parameter "start" of Long, parameter "strand" of String,
           parameter "length" of Long, parameter "feature_type" of String,
           parameter "global_location" of type "Location" -> structure:
           parameter "contig_id" of String, parameter "start" of Long,
           parameter "strand" of String, parameter "length" of Long,
           parameter "feature_array" of String, parameter "feature_idx" of
           Long, parameter "ontology_terms" of mapping from String to String,
           parameter "num_found" of Long
        """
        return self._client.call_method('MetagenomeAPI.search',
                                        [params], self._service_ver, context)

    def search_region(self, params, context=None):
        """
        :param params: instance of type "SearchRegionOptions" (ref:
           `KBaseMetagenomes.AnnotatedMetagenomeAssembly` workspace object
           reference contig_id: id of contig to search around. region_start:
           integer start of contig context to search around. region_length:
           integer lenght of contig context to search around. page_start:
           integer start of pagination page_limit: integer end of pagination
           sort_by: list of tuples by which to sort by, ex: [("elasticsearch
           ", ascend bool), ...]) -> structure: parameter "ref" of String,
           parameter "contig_id" of String, parameter "region_start" of Long,
           parameter "region_length" of Long, parameter "page_start" of Long,
           parameter "page_limit" of Long, parameter "sort_by" of list of
           type "column_sorting" -> tuple of size 2: parameter "column" of
           String, parameter "ascending" of type "boolean" (Indicates true or
           false values, false = 0, true = 1 @range [0,1])
        :returns: instance of type "SearchRegionResult" (contig_id: id of
           contig to search around, (same as input). region_start: integer
           start of contig context to search around, (same as input).
           region_length: integer lenght of contig context to search around,
           (same as input). start: integer start of pagination features: list
           of feature information. num_found: the total number of matches
           with the query (without pagination)) -> structure: parameter
           "contig_id" of String, parameter "region_start" of Long, parameter
           "region_length" of Long, parameter "start" of Long, parameter
           "features" of list of type "FeatureData" (aliases - mapping from
           alias name (key) to set of alias sources (value) global_location -
           this is location-related properties that are under sorting whereas
           items in "location" array are not, feature_array - field recording
           which array a feature is located in (features, mrnas, cdss,
           non_coding_features) feature_idx - field keeping the position of
           feature in its array in a Genome object, ontology_terms - mapping
           from term ID (key) to term name (value).) -> structure: parameter
           "feature_id" of String, parameter "dna_sequence" of String,
           parameter "warnings" of list of String, parameter "parent_gene" of
           String, parameter "size" of Long, parameter
           "functional_descriptions" of list of String, parameter "aliases"
           of mapping from String to list of String, parameter "function" of
           String, parameter "location" of list of type "Location" ->
           structure: parameter "contig_id" of String, parameter "start" of
           Long, parameter "strand" of String, parameter "length" of Long,
           parameter "feature_type" of String, parameter "global_location" of
           type "Location" -> structure: parameter "contig_id" of String,
           parameter "start" of Long, parameter "strand" of String, parameter
           "length" of Long, parameter "feature_array" of String, parameter
           "feature_idx" of Long, parameter "ontology_terms" of mapping from
           String to String, parameter "num_found" of Long
        """
        return self._client.call_method('MetagenomeAPI.search_region',
                                        [params], self._service_ver, context)

    def search_contigs(self, params, context=None):
        """
        :param params: instance of type "SearchContigsOptions" (ref -
           `KBaseMetagenomes.AnnotatedMetagenomeAssembly` workspace object
           reference start - integer start of pagination limit - integer
           limit of pagination sort_by - tuple by which to sort by and string
           component must be one of ("length/contig_id/feature_count", ascend
           bool)) -> structure: parameter "ref" of String, parameter "start"
           of Long, parameter "limit" of Long, parameter "sort_by" of type
           "column_sorting" -> tuple of size 2: parameter "column" of String,
           parameter "ascending" of type "boolean" (Indicates true or false
           values, false = 0, true = 1 @range [0,1])
        :returns: instance of type "SearchContigsResult" (num_found - number
           of contigs found in total, start - start of the pagination contigs
           - list of contig individual contig information) -> structure:
           parameter "num_found" of Long, parameter "start" of Long,
           parameter "contigs" of list of type "contig" (contig_id -
           identifier of contig feature_count - number of features associated
           with contig length - the dna sequence length of the contig) ->
           structure: parameter "contig_id" of String, parameter
           "feature_count" of Long, parameter "length" of Long
        """
        return self._client.call_method('MetagenomeAPI.search_contigs',
                                        [params], self._service_ver, context)

    def get_contig_info(self, params, context=None):
        """
        :param params: instance of type "GetContigInfoParams" -> structure:
           parameter "ref" of String, parameter "contig_id" of String
        :returns: instance of type "GetContigInfoResult" -> structure:
           parameter "contig" of type "contig" (contig_id - identifier of
           contig feature_count - number of features associated with contig
           length - the dna sequence length of the contig) -> structure:
           parameter "contig_id" of String, parameter "feature_count" of
           Long, parameter "length" of Long
        """
        return self._client.call_method('MetagenomeAPI.get_contig_info',
                                        [params], self._service_ver, context)

    def get_feature_type_counts(self, params, context=None):
        """
        :param params: instance of type "GetFeatureTypeCountsParams" ->
           structure: parameter "ref" of String
        :returns: instance of type "GetFeatureTypeCountsResult" -> structure:
           parameter "feature_type_counts" of mapping from String to Long
        """
        return self._client.call_method('MetagenomeAPI.get_feature_type_counts',
                                        [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('MetagenomeAPI.status',
                                        [], self._service_ver, context)
